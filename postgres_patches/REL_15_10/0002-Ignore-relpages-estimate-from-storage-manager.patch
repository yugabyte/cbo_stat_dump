From 930bb230ee3b9e027659d43250b8d58be0a2710e Mon Sep 17 00:00:00 2001
From: Gaurav Kukreja <gaurav@gauravk.in>
Date: Thu, 6 Mar 2025 16:02:54 +0530
Subject: [PATCH 2/2] Ignore relpages estimate from storage manager

Instead of relying on reltuples estimate in pg_class for query planning,
we try to find an up-to-date estimate of relpages from the storage
manager and extrapolate the current reltuples from the values available
in statistics.

In order to reproduce query planner issues encountered in production
instance, we want to allow importing statistics to a test cluster so
that query planner can be forced to make same plan choices. For this
purpose, we must disable this feature.

With this change, this feature can be disabled by enabling the GUC
`enable_cbo_statistics_simulation`.
---
 src/backend/storage/buffer/bufmgr.c | 45 +++++++++++++++++++----------
 src/backend/utils/misc/guc.c        | 10 +++++++
 src/include/storage/bufmgr.h        |  1 +
 3 files changed, 41 insertions(+), 15 deletions(-)

diff --git a/src/backend/storage/buffer/bufmgr.c b/src/backend/storage/buffer/bufmgr.c
index 9fcb3d6e19..7b73a07020 100644
--- a/src/backend/storage/buffer/bufmgr.c
+++ b/src/backend/storage/buffer/bufmgr.c
@@ -135,6 +135,7 @@ bool		zero_damaged_pages = false;
 int			bgwriter_lru_maxpages = 100;
 double		bgwriter_lru_multiplier = 2.0;
 bool		track_io_timing = false;
+bool		enable_cbo_statistics_simulation = false;
 
 /*
  * How many buffers PrefetchBuffer callers should try to stay ahead of their
@@ -2953,21 +2954,35 @@ RelationGetNumberOfBlocksInFork(Relation relation, ForkNumber forkNum)
 {
 	if (RELKIND_HAS_TABLE_AM(relation->rd_rel->relkind))
 	{
-		/*
-		 * Not every table AM uses BLCKSZ wide fixed size blocks. Therefore
-		 * tableam returns the size in bytes - but for the purpose of this
-		 * routine, we want the number of blocks. Therefore divide, rounding
-		 * up.
-		 */
-		uint64		szbytes;
-
-		szbytes = table_relation_size(relation, forkNum);
-
-		return (szbytes + (BLCKSZ - 1)) / BLCKSZ;
-	}
-	else if (RELKIND_HAS_STORAGE(relation->rd_rel->relkind))
-	{
-		return smgrnblocks(RelationGetSmgr(relation), forkNum);
+		if (enable_cbo_statistics_simulation)
+		{
+			return relation->rd_rel->relpages;
+		}
+		else
+		{
+			/*
+			* Not every table AM uses BLCKSZ wide fixed size blocks. Therefore
+			* tableam returns the size in bytes - but for the purpose of this
+			* routine, we want the number of blocks. Therefore divide, rounding
+			* up.
+			*/
+			uint64		szbytes;
+ 
+			szbytes = table_relation_size(relation, forkNum);
+ 
+			return (szbytes + (BLCKSZ - 1)) / BLCKSZ;
+		}
+ 	}
+ 	else if (RELKIND_HAS_STORAGE(relation->rd_rel->relkind))
+ 	{
+		if (enable_cbo_statistics_simulation)
+		{
+			return relation->rd_rel->relpages;
+		}
+		else
+		{
+			return smgrnblocks(RelationGetSmgr(relation), forkNum);
+		}
 	}
 	else
 		Assert(false);
diff --git a/src/backend/utils/misc/guc.c b/src/backend/utils/misc/guc.c
index e9084f4506..a340f0ec9b 100644
--- a/src/backend/utils/misc/guc.c
+++ b/src/backend/utils/misc/guc.c
@@ -1938,6 +1938,16 @@ static struct config_bool ConfigureNamesBool[] =
 		NULL, NULL, NULL
 	},
 
+	{
+		{"enable_cbo_statistics_simulation", PGC_USERSET, COMPAT_OPTIONS_PREVIOUS,
+			gettext_noop("Enable statistics simulation for CBO."),
+			NULL
+		},
+		&enable_cbo_statistics_simulation,
+		false,
+		NULL, NULL, NULL
+	},
+
 	{
 		{"recovery_target_inclusive", PGC_POSTMASTER, WAL_RECOVERY_TARGET,
 			gettext_noop("Sets whether to include or exclude transaction with recovery target."),
diff --git a/src/include/storage/bufmgr.h b/src/include/storage/bufmgr.h
index 58391406f6..fc04c9de92 100644
--- a/src/include/storage/bufmgr.h
+++ b/src/include/storage/bufmgr.h
@@ -71,6 +71,7 @@ extern PGDLLIMPORT double bgwriter_lru_multiplier;
 extern PGDLLIMPORT bool track_io_timing;
 extern PGDLLIMPORT int effective_io_concurrency;
 extern PGDLLIMPORT int maintenance_io_concurrency;
+extern PGDLLIMPORT bool enable_cbo_statistics_simulation;
 
 extern PGDLLIMPORT int checkpoint_flush_after;
 extern PGDLLIMPORT int backend_flush_after;
-- 
2.39.5 (Apple Git-154)

